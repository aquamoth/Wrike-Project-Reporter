{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useCookies","cookies","setCookies","oauthToken","useState","lastError","setLastError","folders","setFolders","projects","setProjects","onCallWrike","a","receiveDataFromWrike","wrike","folderDictionary","projectsWithoutTasks","isAxiosError","response","status","JSON","stringify","data","console","error","items","map","p","path","walker","unshift","title","parentIds","id","permalink","join","className","src","logo","alt","onChange","e","target","value","maxAge","disabled","onClick","style","color","key","href","rel","log","httpClient","axios","create","baseURL","headers","authorization","get","projectsResponse","length","activeTasksResponse","activeTasks","foldersResponse","folder","projectsInProgress","filterProjectsInProgress","tasksPerProject","mapTasksPerProject","filter","workflowId","project","customStatusId","tasks","dictionary","task","push","superParentIds","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAAe,MAA0B,iC,iCCsG1BA,MAzEf,WAAgB,IAAD,EAEgCC,cAFhC,mBAENC,EAFM,KAEGC,EAFH,KAGPC,GAHO,KAGMF,EAAO,YAAkB,IAH/B,EAMqBG,mBAAS,IAN9B,mBAMNC,EANM,KAMKC,EANL,OAOiBF,mBAAmC,IAPpD,mBAONG,EAPM,KAOGC,EAPH,OAQmBJ,mBAAmB,IARtC,mBAQNK,EARM,KAQIC,EARJ,KAWPC,EAAW,uCAAG,4BAAAC,EAAA,6DAClBN,EAAa,IACbI,EAAY,IAFM,kBAKIG,EAAqBV,GALzB,OAKVW,EALU,OAMhBN,EAAWM,EAAMC,kBACjBL,EAAYI,EAAME,sBAPF,kDAUZ,KAAGC,aACLX,EAAa,IAAD,OAAK,KAAGY,SAASC,OAAjB,aAA4BC,KAAKC,UAAU,KAAGH,SAASI,SAGnEC,QAAQC,MAAR,MACAlB,EAAa,kEAfC,0DAAH,qDAoBXmB,EAAK,OAAGhB,QAAH,IAAGA,OAAH,EAAGA,EAAUiB,KAAI,SAAAC,GAG1B,IAFA,IAAIC,EAAiB,GACjBC,EAASF,EACNE,GACLD,EAAKE,QAAQD,EAAOE,OACpBF,EAAStB,EAAQsB,EAAOG,UAAU,IAGpC,MAAQ,CACNC,GAAIN,EAAEM,GACNF,MAAOJ,EAAEI,MACTG,UAAWP,EAAEO,UACbN,KAAMA,EAAKO,KAAK,SAQpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SAEzC,8BAAUC,SATW,SAACC,GAC1BvC,EAAW,aAAcuC,EAAEC,OAAOC,MAAO,CAAEC,OAtElB,WA8EoBzC,GAEzC,4BAAQ0C,SAAyB,KAAf1C,EAAmB2C,QAASnC,GAA9C,cAEA,yBAAKoC,MAAO,CAACC,MAAM,QAAS3C,GAE5B,4BACGoB,EAAMC,KAAI,SAAAC,GAAC,OACV,wBAAIsB,IAAKtB,EAAEM,IAAI,uBAAGiB,KAAMvB,EAAEO,UAAWQ,OAAO,SAASS,IAAI,uBAAuBxB,EAAEC,c,SAa/Ef,E,8EAAf,WAAoCV,GAApC,yCAAAS,EAAA,6DACEW,QAAQ6B,IAAI,iBAENC,EAAaC,IAAMC,OAAO,CAC9BC,QAAS,gCACTC,QAAS,CAAEC,cAAe,UAAYvD,KAL1C,SAQiCkD,EAAWM,IAA2B,sCARvE,cAQQC,EARR,OASQnD,EAAWmD,EAAiBtC,KAAKA,KACvCC,QAAQ6B,IAAR,mBAAwB3C,EAASoD,OAAjC,cAVF,SAYoCR,EAAWM,IAAyB,6DAZxE,cAYQG,EAZR,OAaQC,EAAcD,EAAoBxC,KAAKA,KAC7CC,QAAQ6B,IAAR,mBAAwBW,EAAYF,OAApC,WAdF,UAgBgCR,EAAWM,IAA2B,uCAhBtE,QAgBQK,EAhBR,OAiBQzD,EAAUyD,EAAgB1C,KAAKA,KACrCC,QAAQ6B,IAAR,mBAAwB7C,EAAQsD,OAAhC,aAEM9C,EAA8C,GApBtD,cAqBuBR,GArBvB,IAqBE,2BAAW0D,EAAmB,QAC5BlD,EAAiBkD,EAAOhC,IAAMgC,EAtBlC,qCAyBQC,EAAqBC,EAAyB1D,GACpDc,QAAQ6B,IAAR,UAAec,EAAmBL,OAAlC,0BAEMO,EAAkBC,EAAmBN,GACrC/C,EAAuBkD,EAAmBI,QAAO,SAAAL,GAAM,QAAMA,EAAOhC,MAAMmC,MAChF7C,QAAQ6B,IAAR,UAAepC,EAAqB6C,OAApC,4BA9BF,kBAiCS,CAAE9C,mBAAkBC,yBAjC7B,6C,sBAoCA,SAASmD,EAAyB1D,GAChC,OAAOA,EACJ6D,QAAO,SAAAL,GAAM,MAA0B,qBAAtBA,EAAOM,cACxBD,QAAO,SAAAL,GAAM,MAAsC,qBAAlCA,EAAOO,QAAQC,kBAGrC,SAASJ,EAAmBK,GAC1B,IADyC,EACnCC,EAAyC,GADN,cAGtBD,GAHsB,IAGzC,2BAA0B,CAAC,IAAD,EAAfE,EAAe,sBAEPA,EAAK5C,WAFE,IAExB,2BAAiC,CAAC,IAAvBC,EAAsB,QACzBA,KAAM0C,IACVA,EAAW1C,GAAM,IACnB0C,EAAW1C,GAAI4C,KAAKD,EAAK3C,KALH,kDAQP2C,EAAKE,gBARE,IAQxB,2BAAsC,CAAC,IAA5B7C,EAA2B,QAC9BA,KAAM0C,IACVA,EAAW1C,GAAM,IACnB0C,EAAW1C,GAAI4C,KAAKD,EAAK3C,KAXH,gCAHe,8BAoBzC,OAAO0C,ECtKT,IAYeI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8d6d1b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport { WrikeResponse, Folder, Task } from './types';\nimport { useCookies } from 'react-cookie'\n\nconst ONE_MONTH_IN_SECONDS = 30*24*60*60\n  \n// import ClientOAuth2 from 'client-oauth2'\n\n// const wrikeAuth = new ClientOAuth2({\n//   clientId: '0IbwXYmK',\n//   clientSecret: '9sKTPsWAkwoD5RY51WS1OaKe7uS0KtOs9NeHycKvxutAKTt1w9hHRJ1XWFHmmMKn',\n//   accessTokenUri: 'https://login.wrike.com/oauth2/token',\n//   authorizationUri: 'https://login.wrike.com/oauth2/authorize/v4',\n//   redirectUri: 'http://localhost:3000',\n//   scopes: ['wsReadOnly']\n// });\n\n// (window as any).oauth2Callback = async function (uri: string) {\n//   console.log('Calling wrike for access token', uri)\n//   const user = await wrikeAuth.token.getToken(uri);\n//   console.log(user)\n// }\n\n// window.open(wrikeAuth.token.getUri())\n\n\nfunction App() {\n\n  const [cookies, setCookies, removeCookies] = useCookies()\n  const oauthToken = cookies['oauthToken'] || ''\n  // console.log('cookies', oauthToken)\n\n  const [lastError, setLastError] = useState('')\n  const [folders, setFolders] = useState<{ [id: string]: Folder }>({})\n  const [projects, setProjects] = useState<Folder[]>([])\n\n\n  const onCallWrike = async () => {\n    setLastError('')\n    setProjects([])\n\n    try {\n      const wrike = await receiveDataFromWrike(oauthToken);\n      setFolders(wrike.folderDictionary)\n      setProjects(wrike.projectsWithoutTasks)\n    }\n    catch (ex) {\n      if (ex.isAxiosError) {\n        setLastError(`(${ex.response.status}) ${JSON.stringify(ex.response.data)}`)\n      }\n      else {\n        console.error(ex)\n        setLastError('An unhandled exception occurred. See the console for details!')\n      }\n    }\n  }\n\n  const items = projects?.map(p => {\n    let path: string[] = []\n    let walker = p\n    while (walker) {\n      path.unshift(walker.title)\n      walker = folders[walker.parentIds[0]]\n    }\n\n    return ({\n      id: p.id,\n      title: p.title,\n      permalink: p.permalink,\n      path: path.join('/')\n    })\n  })\n\n  const onAuthTokenChanged = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCookies('oauthToken', e.target.value, { maxAge: ONE_MONTH_IN_SECONDS })\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <textarea onChange={onAuthTokenChanged}>{oauthToken}</textarea>\n\n        <button disabled={oauthToken === ''} onClick={onCallWrike}>Call Wrike</button>\n\n        <div style={{color:'red'}}>{lastError}</div>\n\n        <ul>\n          {items.map(p => (\n            <li key={p.id}><a href={p.permalink} target=\"_blank\" rel=\"noopener noreferrer\">{p.path}</a></li>\n          ))}\n        </ul>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nasync function receiveDataFromWrike(oauthToken: string) {\n  console.log('Calling Wrike');\n\n  const httpClient = axios.create({\n    baseURL: 'https://www.wrike.com/api/v4/',\n    headers: { authorization: 'Bearer ' + oauthToken }\n  })\n\n  const projectsResponse = await httpClient.get<WrikeResponse<Folder>>(\"folders?project=true&deleted=false\");\n  const projects = projectsResponse.data.data;\n  console.log(`Received ${projects.length} projects`);\n\n  const activeTasksResponse = await httpClient.get<WrikeResponse<Task>>(\"tasks?status=Active&fields=['parentIds','superParentIds']\");\n  const activeTasks = activeTasksResponse.data.data;\n  console.log(`Received ${activeTasks.length} tasks`);\n\n  const foldersResponse = await httpClient.get<WrikeResponse<Folder>>(\"folders?project=false&deleted=false\");\n  const folders = foldersResponse.data.data;\n  console.log(`Received ${folders.length} folders`);\n\n  const folderDictionary: { [id: string]: Folder; } = {};\n  for (const folder of folders) {\n    folderDictionary[folder.id] = folder;\n  }\n\n  const projectsInProgress = filterProjectsInProgress(projects);\n  console.log(`${projectsInProgress.length} projects in progress`);\n\n  const tasksPerProject = mapTasksPerProject(activeTasks);\n  const projectsWithoutTasks = projectsInProgress.filter(folder => !(folder.id in tasksPerProject));\n  console.log(`${projectsWithoutTasks.length} projects have no tasks`);\n\n  // console.dir(projectsWithoutTasks)\n  return { folderDictionary, projectsWithoutTasks };\n}\n\nfunction filterProjectsInProgress(projects: Folder[]) {\n  return projects\n    .filter(folder => folder.workflowId === 'IEAEEOG5K7733RZD') // Default Workflow\n    .filter(folder => folder.project.customStatusId === 'IEAEEOG5JMBYF5CY');\n}\n\nfunction mapTasksPerProject(tasks: Task[]) {\n  const dictionary: { [id: string]: string[] } = {};\n\n  for (const task of tasks) {\n\n    for (const id of task.parentIds) {\n      if (!(id in dictionary))\n        dictionary[id] = [];\n      dictionary[id].push(task.id);\n    }\n\n    for (const id of task.superParentIds) {\n      if (!(id in dictionary))\n        dictionary[id] = [];\n      dictionary[id].push(task.id);\n    }\n\n  }\n\n  // console.dir(dictionary)\n  return dictionary;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}